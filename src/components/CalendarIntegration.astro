---
export interface Props {
  title: string;
  prepTime?: string;
  cookTime?: string;
  totalTime?: string;
  servings?: string;
  slug: string;
}

const { title, prepTime, cookTime, totalTime, servings, slug } = Astro.props;

// Parse time strings to minutes
function parseTimeToMinutes(timeStr: string): number {
  if (!timeStr) return 0;
  
  // Handle formats like "60 min", "5 hours", "1.5 hours", etc.
  const hourMatch = timeStr.match(/(\d+(?:\.\d+)?)\s*(?:hour|hr|h)/i);
  const minMatch = timeStr.match(/(\d+)\s*min/i);
  
  let totalMin = 0;
  if (hourMatch) {
    totalMin += parseFloat(hourMatch[1]) * 60;
  }
  if (minMatch) {
    totalMin += parseInt(minMatch[1]);
  }
  
  return totalMin;
}

const prepMinutes = prepTime ? parseTimeToMinutes(prepTime) : 0;
const cookMinutes = cookTime ? parseTimeToMinutes(cookTime) : 0;
const serveMinutes = 30; // Fixed 30 minutes for serving

// Store durations for JavaScript (in milliseconds)
const durations = {
  prep: prepMinutes * 60 * 1000,
  cook: cookMinutes * 60 * 1000,
  serve: serveMinutes * 60 * 1000
};
---

<div class="calendar-integration">
  <div class="calendar-header">
    <h3><i class="fas fa-calendar-alt"></i> Plan Your Cooking Timeline</h3>
    <p>Add this recipe to your calendar to plan your cooking schedule</p>
  </div>
  
  <div class="calendar-actions">
    <div class="planning-mode">
      <label>Planning Mode:</label>
      <div class="mode-selector">
        <button type="button" class="mode-btn active" id="mode-start" onclick="window.switchMode('start')">
          <i class="fas fa-play"></i> Start Cooking
        </button>
        <button type="button" class="mode-btn" id="mode-eating" onclick="window.switchMode('eating')">
          <i class="fas fa-utensils"></i> Eating Time
        </button>
      </div>
    </div>
    
    <div class="date-time-selector">
      <div>
        <label for="cooking-date">Choose your date:</label>
        <input type="date" id="cooking-date" name="cooking-date" />
      </div>
      
      <div>
        <label for="cooking-time" id="time-label">Start cooking at:</label>
        <input type="time" id="cooking-time" name="cooking-time" />
      </div>
    </div>
  </div>
  
  <div class="timeline-preview">
    <h4>Your Cooking Timeline:</h4>
    <div class="timeline-events" id="timeline-events">
      <!-- Will be populated by JavaScript -->
    </div>
  </div>
  
  <div class="calendar-buttons">
    <button class="calendar-btn google-calendar" onclick="window.addToGoogleCalendar()">
      <i class="fab fa-google"></i>
      Add to Google Calendar
    </button>
    
    <button class="calendar-btn apple-calendar" onclick="window.downloadICSFile()">
      <i class="fab fa-apple"></i>
      Add to Apple Calendar
    </button>
  </div>
</div>

<script is:inline define:vars={{ title, slug, durations, prepMinutes, cookMinutes, serveMinutes }}>
  // Store recipe data
  window.recipeData = {
    title: title,
    slug: slug,
    durations: durations,
    prepMinutes: prepMinutes,
    cookMinutes: cookMinutes,
    serveMinutes: serveMinutes,
    currentMode: 'start' // 'start' or 'eating'
  };

  window.switchMode = function(mode) {
    const data = window.recipeData;
    data.currentMode = mode;
    
    // Update button states
    const startBtn = document.getElementById('mode-start');
    const eatingBtn = document.getElementById('mode-eating');
    const timeLabel = document.getElementById('time-label');
    
    if (mode === 'start') {
      startBtn.classList.add('active');
      eatingBtn.classList.remove('active');
      timeLabel.textContent = 'Start cooking at:';
    } else {
      startBtn.classList.remove('active');
      eatingBtn.classList.add('active');
      timeLabel.textContent = 'Ready to eat at:';
    }
    
    // Update timeline
    updateTimelinePreview();
  }

  function getSelectedDateTime() {
    const dateInput = document.getElementById('cooking-date');
    const timeInput = document.getElementById('cooking-time');
    
    if (!dateInput || !timeInput) return null;
    
    const selectedDate = dateInput.value;
    const selectedTime = timeInput.value;
    
    if (!selectedDate || !selectedTime) return null;
    
    // Combine date and time
    const dateTime = new Date(selectedDate + 'T' + selectedTime);
    return dateTime;
  }
  
  function calculateStartTime(eatingTime) {
    const data = window.recipeData;
    const totalDuration = data.durations.prep + data.durations.cook;
    return new Date(eatingTime.getTime() - totalDuration);
  }

  function formatTime(date) {
    return date.toLocaleTimeString('en-US', { 
      hour: 'numeric', 
      minute: '2-digit',
      hour12: true 
    });
  }

  function updateTimelinePreview() {
    const selectedTime = getSelectedDateTime();
    if (!selectedTime) return;
    
    const data = window.recipeData;
    const eventsContainer = document.getElementById('timeline-events');
    if (!eventsContainer) return;
    
    // Calculate start time based on mode
    let startTime;
    if (data.currentMode === 'eating') {
      // User selected eating time, calculate when to start cooking
      startTime = calculateStartTime(selectedTime);
    } else {
      // User selected start cooking time
      startTime = selectedTime;
    }
    
    let currentTime = new Date(startTime);
    const events = [];
    
    // Prep event
    if (data.prepMinutes > 0) {
      const prepEnd = new Date(currentTime.getTime() + data.durations.prep);
      events.push({
        type: 'prep',
        title: `Prep: ${data.title}`,
        startTime: currentTime.getTime(),
        endTime: prepEnd.getTime(),
        description: `Preparation time for ${data.title}. Gather ingredients and prep as needed.`
      });
      currentTime = prepEnd;
    }
    
    // Cook event
    if (data.cookMinutes > 0) {
      const cookEnd = new Date(currentTime.getTime() + data.durations.cook);
      events.push({
        type: 'cook',
        title: `Cook: ${data.title}`,
        startTime: currentTime.getTime(),
        endTime: cookEnd.getTime(),
        description: `Active cooking time for ${data.title}. Follow recipe instructions.`
      });
      currentTime = cookEnd;
    }
    
    // Serve event
    const serveEnd = new Date(currentTime.getTime() + data.durations.serve);
    events.push({
      type: 'serve',
      title: `Serve: ${data.title}`,
      startTime: currentTime.getTime(),
      endTime: serveEnd.getTime(),
      description: `Time to serve ${data.title}!`
    });
    
    // Store events globally
    window.timelineEvents = events;
    
    // Render timeline
    eventsContainer.innerHTML = events.map(event => `
      <div class="timeline-event ${event.type}">
        <div class="event-time">
          ${formatTime(new Date(event.startTime))} - ${formatTime(new Date(event.endTime))}
        </div>
        <div class="event-title">${event.title}</div>
        <div class="event-description">${event.description}</div>
      </div>
    `).join('');
  }

  function formatICSDate(date) {
    // Format: YYYYMMDDTHHmmss in local time
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    return `${year}${month}${day}T${hours}${minutes}${seconds}`;
  }

  window.downloadICSFile = function() {
    const events = window.timelineEvents;
    if (!events || events.length === 0) {
      alert('Please select a date and time first');
      return;
    }
    
    const data = window.recipeData;
    const recipeUrl = `https://brains-of-the-op.github.io/recipe-site/recipes/${data.slug}/`;
    
    let icsContent = 'BEGIN:VCALENDAR\r\n';
    icsContent += 'PRODID:-//brains-of-the-op.github.io//Recipes//EN\r\n';
    icsContent += 'VERSION:2.0\r\n';
    icsContent += 'CALSCALE:GREGORIAN\r\n';
    icsContent += 'METHOD:PUBLISH\r\n';
    
    // Add timezone for America/Edmonton
    icsContent += 'BEGIN:VTIMEZONE\r\n';
    icsContent += 'TZID:America/Edmonton\r\n';
    icsContent += 'X-LIC-LOCATION:America/Edmonton\r\n';
    icsContent += 'BEGIN:STANDARD\r\n';
    icsContent += 'TZOFFSETFROM:-0600\r\n';
    icsContent += 'TZOFFSETTO:-0700\r\n';
    icsContent += 'TZNAME:MST\r\n';
    icsContent += 'DTSTART:19701101T020000\r\n';
    icsContent += 'RRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\n';
    icsContent += 'END:STANDARD\r\n';
    icsContent += 'BEGIN:DAYLIGHT\r\n';
    icsContent += 'TZOFFSETFROM:-0700\r\n';
    icsContent += 'TZOFFSETTO:-0600\r\n';
    icsContent += 'TZNAME:MDT\r\n';
    icsContent += 'DTSTART:19700308T020000\r\n';
    icsContent += 'RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\n';
    icsContent += 'END:DAYLIGHT\r\n';
    icsContent += 'END:VTIMEZONE\r\n';
    
    // Add events
    events.forEach((event, index) => {
      const eventType = event.type;
      const uid = `${data.slug}-${eventType}@brains-of-the-op.github.io`;
      const eventStart = new Date(event.startTime);
      const eventEnd = new Date(event.endTime);
      
      icsContent += 'BEGIN:VEVENT\r\n';
      icsContent += `UID:${uid}\r\n`;
      icsContent += `DTSTAMP:${formatICSDate(new Date())}Z\r\n`;
      icsContent += `SUMMARY:${event.title}\r\n`;
      icsContent += `DESCRIPTION:${event.description}\\n${recipeUrl}\r\n`;
      icsContent += `URL:${recipeUrl}\r\n`;
      icsContent += `DTSTART;TZID=America/Edmonton:${formatICSDate(eventStart)}\r\n`;
      icsContent += `DTEND;TZID=America/Edmonton:${formatICSDate(eventEnd)}\r\n`;
      icsContent += 'SEQUENCE:0\r\n';
      
      // Add alarm reminders
      if (eventType === 'prep') {
        icsContent += 'BEGIN:VALARM\r\n';
        icsContent += 'TRIGGER:-PT15M\r\n';
        icsContent += 'ACTION:DISPLAY\r\n';
        icsContent += 'DESCRIPTION:Prep starts soon\r\n';
        icsContent += 'END:VALARM\r\n';
      } else if (eventType === 'cook') {
        icsContent += 'BEGIN:VALARM\r\n';
        icsContent += 'TRIGGER:-PT5M\r\n';
        icsContent += 'ACTION:DISPLAY\r\n';
        icsContent += 'DESCRIPTION:Start cooking\r\n';
        icsContent += 'END:VALARM\r\n';
      } else if (eventType === 'serve') {
        icsContent += 'BEGIN:VALARM\r\n';
        icsContent += 'TRIGGER:-PT5M\r\n';
        icsContent += 'ACTION:DISPLAY\r\n';
        icsContent += 'DESCRIPTION:Serve soon\r\n';
        icsContent += 'END:VALARM\r\n';
      }
      
      icsContent += 'END:VEVENT\r\n';
    });
    
    icsContent += 'END:VCALENDAR\r\n';
    
    // Download file
    const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `${data.slug}-cooking-timeline.ics`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  window.addToGoogleCalendar = function() {
    const events = window.timelineEvents;
    if (!events || events.length === 0) {
      alert('Please select a date and time first');
      return;
    }
    
    // Open Google Calendar for each event
    events.forEach(event => {
      const eventStart = new Date(event.startTime);
      const eventEnd = new Date(event.endTime);
      
      const startISO = eventStart.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
      const endISO = eventEnd.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
      
      const googleUrl = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(event.title)}&dates=${startISO}/${endISO}&details=${encodeURIComponent(event.description)}`;
      
      window.open(googleUrl, '_blank');
    });
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', function() {
    const dateInput = document.getElementById('cooking-date');
    const timeInput = document.getElementById('cooking-time');
    
    if (!dateInput || !timeInput) return;
    
    // Set default to tomorrow at 4:30 PM
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(16, 30, 0, 0);
    
    dateInput.value = tomorrow.toISOString().split('T')[0];
    timeInput.value = '16:30';
    
    // Add event listeners
    dateInput.addEventListener('change', updateTimelinePreview);
    timeInput.addEventListener('change', updateTimelinePreview);
    
    // Initial render
    updateTimelinePreview();
  });
</script>

<style>
  .calendar-integration {
    background: white;
    border-radius: 16px;
    padding: 2rem;
    margin: 2rem 0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(143, 188, 143, 0.2);
  }

  .calendar-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .calendar-header h3 {
    color: var(--primary-color, #8fbc8f);
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .calendar-header p {
    color: var(--text-light, #666);
    margin: 0;
  }

  .calendar-actions {
    margin-bottom: 2rem;
  }

  .planning-mode {
    margin-bottom: 1.5rem;
  }

  .planning-mode > label {
    display: block;
    font-weight: 600;
    color: var(--text-dark, #333);
    margin-bottom: 0.75rem;
    font-size: 1rem;
  }

  .mode-selector {
    display: flex;
    gap: 0.5rem;
    background: #f5f5f5;
    padding: 0.25rem;
    border-radius: 8px;
    width: fit-content;
  }

  .mode-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.25rem;
    border: none;
    border-radius: 6px;
    background: transparent;
    color: var(--text-light, #666);
    font-size: 0.95rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .mode-btn:hover {
    background: rgba(143, 188, 143, 0.1);
    color: var(--primary-color, #8fbc8f);
  }

  .mode-btn.active {
    background: white;
    color: var(--primary-color, #8fbc8f);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .mode-btn i {
    font-size: 1rem;
  }

  .date-time-selector {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
  }

  .date-time-selector label {
    display: block;
    font-weight: 500;
    color: var(--text-dark, #333);
    margin-bottom: 0.5rem;
  }

  .date-time-selector input {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
  }

  .date-time-selector input:focus {
    outline: none;
    border-color: var(--primary-color, #8fbc8f);
  }

  .timeline-preview {
    margin-bottom: 2rem;
  }

  .timeline-preview h4 {
    color: var(--accent-color, #cd853f);
    margin-bottom: 1rem;
  }

  .timeline-events {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .timeline-event {
    padding: 1rem;
    border-radius: 8px;
    border-left: 4px solid;
  }

  .timeline-event.prep {
    background: rgba(143, 188, 143, 0.1);
    border-left-color: var(--primary-color, #8fbc8f);
  }

  .timeline-event.cook {
    background: rgba(205, 133, 63, 0.1);
    border-left-color: var(--accent-color, #cd853f);
  }

  .timeline-event.serve {
    background: rgba(255, 182, 193, 0.1);
    border-left-color: #ffb6c1;
  }

  .event-time {
    font-weight: 600;
    color: var(--primary-color, #8fbc8f);
    font-size: 0.9rem;
  }

  .event-title {
    font-weight: 600;
    margin: 0.5rem 0;
    color: var(--text-dark, #333);
  }

  .event-description {
    color: var(--text-light, #666);
    font-size: 0.9rem;
  }

  .calendar-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
  }

  .calendar-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 1.5rem;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
  }

  .google-calendar {
    background: #4285f4;
    color: white;
  }

  .google-calendar:hover {
    background: #3367d6;
    transform: translateY(-2px);
  }

  .apple-calendar {
    background: #000;
    color: white;
  }

  .apple-calendar:hover {
    background: #333;
    transform: translateY(-2px);
  }

  @media (max-width: 768px) {
    .date-time-selector {
      grid-template-columns: 1fr;
    }
    
    .calendar-buttons {
      flex-direction: column;
    }
    
    .calendar-btn {
      justify-content: center;
    }
  }
</style>
