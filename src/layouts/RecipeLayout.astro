---
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';
import CalendarIntegration from '../components/CalendarIntegration.astro';

export interface Props {
  title: string;
  image?: string;
  prepTime?: string;
  cookTime?: string;
  totalTime?: string;
  servings?: string;
  tags?: string[];
  difficulty?: string;
  temperature?: string;
  slug?: string;
}

const { title, image, prepTime, cookTime, totalTime, servings, tags, difficulty, temperature, slug } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title} - This Is How We Do It</title>
  <link rel="stylesheet" href={`${import.meta.env.BASE_URL}/styles.css`}>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
  <Navigation activePage="recipes" />

  <!-- Recipe Detail Section -->
  <section class="recipe-detail">
    <div class="container">
      <div class="recipe-header">
        <h1>{title}</h1>
        <div class="recipe-stats">
          {prepTime && <span><i class="fas fa-clock"></i> {prepTime}</span>}
          {cookTime && <span><i class="fas fa-fire"></i> {cookTime}</span>}
          {servings && <span><i class="fas fa-users"></i> {servings}</span>}
          {temperature && <span><i class="fas fa-thermometer-half"></i> {temperature}</span>}
          {difficulty && <span><i class="fas fa-signal"></i> {difficulty}</span>}
        </div>
        {tags && tags.length > 0 && (
          <div class="recipe-tags">
            {tags.map(tag => (
              <span class="tag">{tag}</span>
            ))}
          </div>
        )}
      </div>
      {image && (
        <div class="recipe-image">
          <img src={image.startsWith('http') ? image : `${import.meta.env.BASE_URL}${image}`} alt={title} />
        </div>
      )}
      
      <!-- Recipe Actions -->
      <div class="recipe-actions">
        <button 
          class="action-button share-button"
          onclick="shareRecipe()"
          title="Share recipe to Reminders, Notes, or other apps"
        >
          <i class="fas fa-share-alt"></i> Share Recipe
        </button>
        <button 
          class="action-button copy-button"
          onclick="copyIngredients()"
          title="Copy ingredients list to clipboard"
        >
          <i class="fas fa-clipboard-list"></i> Copy Ingredients
        </button>
      </div>

      <div class="recipe-content">
        <slot />
      </div>

      <!-- Calendar Integration -->
      <CalendarIntegration 
        title={title}
        prepTime={prepTime}
        cookTime={cookTime}
        totalTime={totalTime}
        servings={servings}
        slug={slug || ''}
      />
    </div>
  </section>

  <Footer />

  <script src={`${import.meta.env.BASE_URL}/script.js`} is:inline></script>
  
  <script is:inline>
    // Share Recipe function - uses native Web Share API
    async function shareRecipe() {
      const title = document.querySelector('h1').textContent;
      const url = window.location.href;
      
      if (navigator.share) {
        try {
          await navigator.share({
            title: title,
            text: `Check out this recipe: ${title}`,
            url: url
          });
        } catch (err) {
          // User cancelled or error occurred
          if (err.name !== 'AbortError') {
            console.error('Share failed:', err);
            fallbackShare(url);
          }
        }
      } else {
        // Fallback: copy URL to clipboard
        fallbackShare(url);
      }
    }

    function fallbackShare(url) {
      navigator.clipboard.writeText(url).then(() => {
        alert('Recipe link copied to clipboard!');
      }).catch(() => {
        alert('Please copy this URL: ' + url);
      });
    }

    // Copy Ingredients function - extracts and copies ingredient list
    function copyIngredients() {
      const button = event.target.closest('.copy-button');
      const originalHTML = button.innerHTML;
      
      try {
        // Find the Ingredients section
        const headings = Array.from(document.querySelectorAll('h2, h3, h4'));
        const ingredientsHeading = headings.find(h => /ðŸ§‚|ingredients/i.test(h.textContent));
        
        if (!ingredientsHeading) {
          alert('Could not find ingredients section');
          return;
        }

        // Collect all list items until we hit Tools or Instructions
        let items = [];
        let el = ingredientsHeading.nextElementSibling;
        
        while (el) {
          // Stop if we hit another h2 heading (Tools, Instructions, etc.)
          if (el.tagName === 'H2') break;
          
          // Skip h3 headings that say "Tools"
          if (el.tagName === 'H3' && /tools/i.test(el.textContent)) {
            // Skip to next element after this tools section
            el = el.nextElementSibling;
            continue;
          }
          
          // Collect list items from ul/ol
          if (el.tagName === 'UL' || el.tagName === 'OL') {
            const listItems = el.querySelectorAll('li');
            listItems.forEach(li => {
              const text = li.innerText.trim();
              if (text) items.push(text);
            });
          }
          
          el = el.nextElementSibling;
        }

        if (items.length === 0) {
          alert('No ingredients found');
          return;
        }

        // Create the text and HTML to copy
        const recipeTitle = document.querySelector('h1').textContent;
        const url = window.location.href;
        
        // Plain text version (fallback)
        const plainText = `${recipeTitle}\n\nIngredients:\n${items.join('\n')}\n\nFrom: ${url}`;
        
        // HTML version (preserves list formatting for Reminders)
        const htmlItems = items.map(item => `<li>${item}</li>`).join('');
        const htmlContent = `<div><h1>${recipeTitle}</h1><h2>Ingredients:</h2><ul>${htmlItems}</ul><p>From: ${url}</p></div>`;

        // Copy to clipboard with HTML formatting
        const clipboardItem = new ClipboardItem({
          'text/html': new Blob([htmlContent], { type: 'text/html' }),
          'text/plain': new Blob([plainText], { type: 'text/plain' })
        });

        navigator.clipboard.write([clipboardItem]).then(() => {
          // Visual feedback
          button.innerHTML = '<i class="fas fa-check"></i> Copied!';
          button.classList.add('copied');
          
          setTimeout(() => {
            button.innerHTML = originalHTML;
            button.classList.remove('copied');
          }, 2000);
        }).catch(err => {
          console.error('Copy failed:', err);
          // Fallback to plain text if HTML copy fails
          navigator.clipboard.writeText(plainText).then(() => {
            button.innerHTML = '<i class="fas fa-check"></i> Copied!';
            button.classList.add('copied');
            setTimeout(() => {
              button.innerHTML = originalHTML;
              button.classList.remove('copied');
            }, 2000);
          }).catch(() => {
            alert('Could not copy to clipboard. Please try again.');
          });
        });

      } catch (err) {
        console.error('Error extracting ingredients:', err);
        alert('Error extracting ingredients. Please try again.');
      }
    }

    // Interactive ingredients removed per user request
  </script>
</body>
</html>

<style>
  .recipe-detail {
    padding: 2rem 0;
    min-height: 80vh;
    margin-top: 80px;
  }

  .recipe-header {
    text-align: center;
    margin-bottom: 0;
    background: #f0f8f0;
    padding: 2rem 1rem;
  }

  .recipe-header h1 {
    font-size: 2.5rem;
    color: var(--primary-color, #8fbc8f);
    margin-bottom: 1rem;
  }

  .recipe-stats {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .recipe-stats span {
    background: var(--accent-color, #cd853f);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 25px;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .recipe-tags {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    background: var(--accent-color, #cd853f);
    color: white;
    padding: 0.3rem 0.8rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
  }

  .recipe-image {
    text-align: center;
    margin: 5rem 0;
    padding: 0;
    background: none;
  }

  .recipe-image img {
    max-width: 400px;
    max-height: 300px;
    width: auto;
    height: auto;
    object-fit: contain;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .recipe-actions {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    margin: 1.5rem 0;
    padding: 0 1rem;
    flex-wrap: wrap;
  }

  .action-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: white;
    padding: 0.875rem 1.5rem;
    border-radius: 12px;
    border: none;
    font-weight: 500;
    font-size: 1rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    font-family: inherit;
  }

  .share-button {
    background: linear-gradient(135deg, #8fbc8f 0%, #6b9e6b 100%);
  }

  .share-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    background: linear-gradient(135deg, #6b9e6b 0%, #8fbc8f 100%);
  }

  .copy-button {
    background: linear-gradient(135deg, #cd853f 0%, #b8762f 100%);
  }

  .copy-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    background: linear-gradient(135deg, #b8762f 0%, #cd853f 100%);
  }

  .copy-button.copied {
    background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
  }

  .recipe-content {
    max-width: 800px;
    margin: 3rem auto;
    margin-bottom: 0;
    line-height: 1.6;
    background: white;
    padding: 2rem;
    border-radius: 16px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(143, 188, 143, 0.2);
  }

  .recipe-content h2 {
    color: var(--primary-color, #8fbc8f);
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .recipe-content h3 {
    color: var(--accent-color, #cd853f);
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
  }

  .recipe-content ul,
  .recipe-content ol {
    margin-bottom: 1rem;
  }

  .recipe-content li {
    margin-bottom: 0.5rem;
  }


  @media (max-width: 768px) {
    .recipe-header h1 {
      font-size: 2rem;
    }
    
    .recipe-stats {
      flex-direction: column;
      align-items: center;
    }

    .recipe-image {
      max-width: 100%;
      margin: 1.5rem auto;
    }

    .recipe-image img {
      max-width: 100%;
    }

    .recipe-actions {
      flex-direction: column;
      gap: 0.75rem;
    }

    .action-button {
      font-size: 0.9rem;
      padding: 0.75rem 1.25rem;
      width: 100%;
      max-width: 300px;
    }
  }
</style>
