name: Pull Request Preview

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build site
        run: npm run build
      
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸš€ Build Status')
            )
            
            const commentBody = `## ðŸš€ Build Status: Success!
            
            Your changes have been built successfully! âœ…
            
            ### ðŸ§ª Test the calendar integration:
            - [ ] Visit any recipe page (e.g., Turkey Dinner)
            - [ ] Scroll to "Plan Your Cooking Timeline" section
            - [ ] Test date/time picker
            - [ ] Try Google Calendar integration
            - [ ] Try Apple Calendar (ICS download)
            - [ ] Verify timeline updates correctly
            
            ### ðŸ“± Mobile testing:
            - [ ] Test on mobile device
            - [ ] Verify responsive design
            - [ ] Test calendar buttons on mobile
            
            **Commit:** ${context.sha.substring(0, 7)}
            **Branch:** ${context.ref}
            
            ---
            *This comment will be updated automatically when you push new commits.*`
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              })
            }
